class Solution{
    public:
    void solve(vector<vector<int>> &m,vector<string> &ans,int i,int j,int n,string &str) {
        if(i==n-1 && j==n-1) {
            ans.push_back(str);
            return;
        }
        m[i][j] = 0;
        if(i+1<n && m[i+1][j]==1) {
            str.push_back('D');
            solve(m,ans,i+1,j,n,str);
            str.pop_back();
        }
        if(i-1>=0 && m[i-1][j]==1) {
            str.push_back('U');
            solve(m,ans,i-1,j,n,str);
            str.pop_back();
        }
        if(j+1<n && m[i][j+1]==1) {
            str.push_back('R');
            solve(m,ans,i,j+1,n,str);
            str.pop_back();
        }
        if(j-1>=0 && m[i][j-1]==1) {
            str.push_back('L');
            solve(m,ans,i,j-1,n,str);
            str.pop_back();
        }
        m[i][j] = 1;
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        vector<string> ans;
        if(m[0][0]==0) {
            return ans;
        }
        string str;
        solve(m,ans,0,0,n,str);
        sort(ans.begin(),ans.end());
        return ans;
    }
};
